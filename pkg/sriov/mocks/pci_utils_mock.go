// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PciUtils is an autogenerated mock type for the pciUtils type
type PciUtils struct {
	mock.Mock
}

// EnableArpAndNdiscNotify provides a mock function with given fields: ifName
func (_m *PciUtils) EnableArpAndNdiscNotify(ifName string) error {
	ret := _m.Called(ifName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ifName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPciAddress provides a mock function with given fields: ifName, vf
func (_m *PciUtils) GetPciAddress(ifName string, vf int) (string, error) {
	ret := _m.Called(ifName, vf)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (string, error)); ok {
		return rf(ifName, vf)
	}
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(ifName, vf)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(ifName, vf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSriovNumVfs provides a mock function with given fields: ifName
func (_m *PciUtils) GetSriovNumVfs(ifName string) (int, error) {
	ret := _m.Called(ifName)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(ifName)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(ifName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ifName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVFLinkNamesFromVFID provides a mock function with given fields: pfName, vfID
func (_m *PciUtils) GetVFLinkNamesFromVFID(pfName string, vfID int) ([]string, error) {
	ret := _m.Called(pfName, vfID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {
		return rf(pfName, vfID)
	}
	if rf, ok := ret.Get(0).(func(string, int) []string); ok {
		r0 = rf(pfName, vfID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(pfName, vfID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPciUtils creates a new instance of PciUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPciUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *PciUtils {
	mock := &PciUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
