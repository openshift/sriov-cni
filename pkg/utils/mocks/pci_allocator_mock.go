// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PCIAllocation is an autogenerated mock type for the PCIAllocation type
type PCIAllocation struct {
	mock.Mock
}

// CleanAllocatedPCI provides a mock function with given fields: _a0
func (_m *PCIAllocation) CleanAllocatedPCI(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAllocated provides a mock function with given fields: _a0
func (_m *PCIAllocation) IsAllocated(_a0 string) (bool, string, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveAllocatedPCI provides a mock function with given fields: _a0, _a1
func (_m *PCIAllocation) SaveAllocatedPCI(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPCIAllocation interface {
	mock.TestingT
	Cleanup(func())
}

// NewPCIAllocation creates a new instance of PCIAllocation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPCIAllocation(t mockConstructorTestingTNewPCIAllocation) *PCIAllocation {
	mock := &PCIAllocation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
